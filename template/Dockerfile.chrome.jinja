FROM ubuntu:20.04 as base

COPY ./assets/fonts.conf /etc/fonts/local.conf
RUN apt-get -qq update && apt-get -qq dist-upgrade
RUN apt-get -y -qq install software-properties-common && \
	apt-add-repository "deb http://archive.canonical.com/ubuntu $(lsb_release -sc) partner"
RUN echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | debconf-set-selections
RUN apt-get -y -qq --no-install-recommends install \
	dumb-init \
	git \
	ffmpeg \
	fonts-liberation \
	msttcorefonts \
	fonts-roboto \
	fonts-ubuntu \
	fonts-noto-color-emoji \
	fonts-noto-cjk \
	fonts-ipafont-gothic \
	fonts-wqy-zenhei \
	fonts-kacst \
	fonts-freefont-ttf \
	fonts-thai-tlwg \
	fonts-indic \
	fontconfig \
	libappindicator3-1 \
	pdftk \
	unzip \
	locales \
	gconf-service \
	libasound2 \
	libatk-bridge2.0-0 \
	libatk1.0-0 \
	libc6 \
	libcairo2 \
	libcups2 \
	libdbus-1-3 \
	libexpat1 \
	libfontconfig1 \
	libgbm1 \
	libgcc1 \
	libgconf-2-4 \
	libgdk-pixbuf2.0-0 \
	libglib2.0-0 \
	libgtk-3-0 \
	libnspr4 \
	libpango-1.0-0 \
	libpangocairo-1.0-0 \
	libstdc++6 \
	libx11-6 \
	libx11-xcb1 \
	libxcb1 \
	libxcomposite1 \
	libxcursor1 \
	libxdamage1 \
	libxext6 \
	libxfixes3 \
	libxi6 \
	libxrandr2 \
	libxrender1 \
	libxss1 \
	libxtst6 \
	libgbm-dev \
	ca-certificates \
	libappindicator1 \
	libnss3 \
	lsb-release \
	xdg-utils \
	wget \
	xvfb \
	curl \
	build-essential

# Install NodeJS
RUN curl --silent --location https://deb.nodesource.com/setup_{{ node_version }}.x | bash - && \
	apt-get -qq install nodejs && \
	npm install -g npm@latest && \
	npm install -g yarn

ARG BLESS_USER_ID=999
ENV APP_DIR=/app
ENV CHROME_PATH=/usr/bin/google-chrome
ENV LANG="C.UTF-8"
ENV NODE_ENV=production
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

LABEL org.opencontainers.image.source {{ project_url }}

RUN groupadd -r blessuser && useradd --uid ${BLESS_USER_ID} -r -g blessuser -G audio,video blessuser && \
	mkdir -p /home/blessuser/Downloads && \
	chown -R blessuser:blessuser /home/blessuser

# ==================== BUILDER ======================

FROM base as builder

WORKDIR ${APP_DIR}
ENV NODE_ENV=development
# App build
COPY package.json yarn.lock ./
RUN yarn install
COPY ./tsconfig.json .
COPY ./src ./src
RUN yarn build
RUN npm prune --production

# ================ RUNNER ==================
FROM base as runner

# --- Chrome installation
RUN if [ "$(dpkg --print-architecture)" != "amd64" ]; then echo "Chrome Stable is only available for amd64" && exit 1; fi
RUN cd /tmp &&\
	wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb &&\
	dpkg -i google-chrome-stable_current_amd64.deb;
# Cleanup
RUN fc-cache -f -v && \
	apt-get -qq clean && \
	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR $APP_DIR
RUN chown -R blessuser:blessuser $APP_DIR
USER blessuser

COPY --from=builder --chown=blessuser:blessuser ${APP_DIR}/lib/ ./lib
COPY --from=builder --chown=blessuser:blessuser ${APP_DIR}/node_modules/ ./node_modules
COPY --chown=blessuser:blessuser package.json  .
COPY --chown=blessuser:blessuser oclif.manifest.json .
COPY --chown=blessuser:blessuser bin  ./bin
COPY --chown=blessuser:blessuser *.sh  .

RUN yarn link && echo "export PATH=$PATH:/home/blessuser/.yarn/bin" >> /home/blessuser/.bashrc